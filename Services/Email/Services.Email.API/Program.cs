using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using Serilog;
using Serilog.Events;
using Serilog.Formatting.Compact;
using Services.Email.Application.IService;
using Services.Email.Application.Mapper;
using Services.Email.Application.Service;
using Services.Email.Domain.DBContext;
using Services.Email.Domain.Entities;
using Services.Email.Domain.IRepositories;
using Services.Email.Infrastructure.Configuration;
using Services.Email.Infrastructure.Configuration.ExceptionHandlers;
using Services.Email.Infrastructure.Extensions;
using Services.Email.Infrastructure.Repositories;

var builder = WebApplication.CreateBuilder(args);


// Set up logger 3rd party library
builder.Host.UseSerilog(Log.Logger);

// Setting up serilog library
Log.Logger = new LoggerConfiguration()
               .Enrich.FromLogContext()
               .MinimumLevel.Override("Microsoft", LogEventLevel.Warning) // Don't log lower than warnings generated by the application
               .WriteTo.File(new CompactJsonFormatter(),
               builder.Configuration.GetValue<string>("LoggingLocation"),
               rollingInterval: RollingInterval.Day // Generates logs files in "log-yyyymmdd" format
               , retainedFileCountLimit: 90, // Keeps 90 days of log and delete it if older
               shared: true)
               .CreateLogger();

// Add services to the container.
builder.Services.AddDbContext<EmailDbContext>(option =>
{
    option.UseSqlServer(builder.Configuration.GetConnectionString("DefaultConnection"));
});

builder.Services.AddControllers();
builder.Services.AddMemoryCache();
builder.Services.AddHttpContextAccessor();

builder.Services.AddScoped<IUnitOfWork, UnitOfWork>();
builder.Services.AddScoped<IAttachmentsService, AttachmentsService>();
builder.Services.AddScoped<ITemplateService, TemplateService>();
builder.Services.AddScoped<IEmailService, EmailService>();



builder.Services.AddEndpointsApiExplorer();
builder.Services.AddSwaggerGen(swaggerOptions =>
{
    swaggerOptions.AddSecurityDefinition("Bearer",
        new OpenApiSecurityScheme
        {
            Description = "JWT Authorization header using the Bearer scheme (Example: 'Bearer 12345abcdef')",
            Name = "Authorization",
            In = ParameterLocation.Header,
            Type = SecuritySchemeType.ApiKey,
            Scheme = "Bearer"
        });

    swaggerOptions.AddSecurityRequirement(new OpenApiSecurityRequirement
            {
                {
                    new OpenApiSecurityScheme
                    {
                        Reference = new OpenApiReference
                        {
                            Type = ReferenceType.SecurityScheme,
                            Id = "Bearer"
                        }
                    },
                    Array.Empty<string>()
                }
            });
});


// Register AutoMapper
builder.Services.AddAutoMapper(cfg =>
{
    cfg.AddProfile<AttachmentsProfile>();
    cfg.AddProfile<EmailContentProfile>();
    cfg.AddProfile<EmailDetailsProfile>();
    cfg.AddProfile<EmailErrorLogProfile>();
    cfg.AddProfile<EmailRecipientProfile>();
    cfg.AddProfile<RecipientTypeProfile>();
    cfg.AddProfile<SenderInfoProfile>();
    cfg.AddProfile<TemplateDetailsProfile>();
    cfg.AddProfile<TemplateProfile>();
});


// Inject/Initialize static utilities
ConfigurationUtil.Initialize(builder.Configuration);

// Authorization JWT configuration
builder.AddAppAuthetication();


var app = builder.Build();


// Configure global error handlers
app.UseMiddleware<MiddlewareExceptionHandler>();
// Configure the HTTP request pipeline.
app.UseSwagger();
app.UseSwaggerUI(c =>
{
    if (!app.Environment.IsDevelopment())
    {
        c.SwaggerEndpoint("/swagger/v1/swagger.json", "auth API");
        c.RoutePrefix = string.Empty;
    }
});
app.UseHttpsRedirection();
app.UseAuthentication();
app.UseAuthorization();

app.MapControllers();



ApplyMigration();

app.Run();


void ApplyMigration()
{
    using (var scope = app.Services.CreateScope())
    {
        var _db = scope.ServiceProvider.GetRequiredService<EmailDbContext>();

        if (_db.Database.GetPendingMigrations().Count() > 0)
        {
            _db.Database.Migrate();
        }
    }
}
