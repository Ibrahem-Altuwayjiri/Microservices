// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services.Email.Domain.DBContext;

#nullable disable

namespace Services.Email.Domain.Migrations
{
    [DbContext(typeof(EmailDbContext))]
    [Migration("20251011200346_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Services.Email.Domain.Entities.Attachments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Extensions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailDetailsId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FirstLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThirdLine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EmailContent");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailContentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSend")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastTrySend")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SenderInfoId")
                        .HasColumnType("int");

                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("TryNum")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailContentId");

                    b.HasIndex("SenderInfoId");

                    b.HasIndex("TemplateId");

                    b.ToTable("EmailDetails");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmailDetailsId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmailDetailsId");

                    b.ToTable("EmailErrorLog");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailRecipient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmailDetailsId")
                        .HasColumnType("int");

                    b.Property<int>("RecipientTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmailDetailsId");

                    b.HasIndex("RecipientTypeId");

                    b.ToTable("EmailRecipient");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.RecipientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RecipientType");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.SenderInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SenderInfo");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.Template", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Template");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.TemplateDetails", b =>
                {
                    b.Property<int>("TemplateId")
                        .HasColumnType("int");

                    b.Property<int>("VersionNumber")
                        .HasColumnType("int");

                    b.Property<string>("CreateBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDtae")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstLineColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("FooterImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("HeaderImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("SecondLineColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("SubFooterImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SubHeaderImg")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ThirdLineColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleColor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TemplateId", "VersionNumber");

                    b.ToTable("TemplateDetails");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.Attachments", b =>
                {
                    b.HasOne("Services.Email.Domain.Entities.EmailDetails", "EmailDetails")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDetails");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailDetails", b =>
                {
                    b.HasOne("Services.Email.Domain.Entities.EmailContent", "EmailContent")
                        .WithMany()
                        .HasForeignKey("EmailContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Email.Domain.Entities.SenderInfo", "SenderInfo")
                        .WithMany()
                        .HasForeignKey("SenderInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Email.Domain.Entities.Template", "Template")
                        .WithMany()
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailContent");

                    b.Navigation("SenderInfo");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailErrorLog", b =>
                {
                    b.HasOne("Services.Email.Domain.Entities.EmailDetails", "EmailDetails")
                        .WithMany()
                        .HasForeignKey("EmailDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDetails");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailRecipient", b =>
                {
                    b.HasOne("Services.Email.Domain.Entities.EmailDetails", "EmailDetails")
                        .WithMany("EmailRecipients")
                        .HasForeignKey("EmailDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Services.Email.Domain.Entities.RecipientType", "RecipientType")
                        .WithMany()
                        .HasForeignKey("RecipientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmailDetails");

                    b.Navigation("RecipientType");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.TemplateDetails", b =>
                {
                    b.HasOne("Services.Email.Domain.Entities.Template", "Template")
                        .WithMany("TemplateDetails")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.EmailDetails", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("EmailRecipients");
                });

            modelBuilder.Entity("Services.Email.Domain.Entities.Template", b =>
                {
                    b.Navigation("TemplateDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
